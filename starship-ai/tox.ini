# Copyright (c) 2023 Nokia Corporation of America.  All rights reserved.
[tox]
envlist = lint,build_package,build_container,build_helm,build_docs,test_package,test_helm,test_container,test_docs,bundle
skip_missing_interpreters = true
base_python = py310
minversion = 4
skipsdist = true
requires =
    pip>=21
    setuptools>=57
    virtualenv
    wheel
    tox
isolated_build = true

# Tool options (for those that support tox)
[doc8]
max-line-length = 99

[flake8]
exclude =
    .tox,.ctox,.venv,.env,build,.scratchpad,venv
max-line-length = 99
# D100: missing docstring in public module
# D101: missing docstring in public class
# D102: missing docstring in public method
# D103: missing docstring in public function
# D104: missing docstring in public package
# D105: missing docstring in magic method
# D106: missing docstring in public nested class
# D107: missing docstring in __init__
# D401: first line should be in imperative mood
# W504: line break after binary operator (we use W503 which is line break before binary operator)
ignore = D100,D101,D102,D103,D104,D105,D106,D107,D203,D401,W504
copyright-check = True
copyright-author = Nokia
copyright-min-file-size = 1
copyright-regexp = Copyright\s\(c\)\s+\d{4}\s+%(author)s\s+\-\s+%(author)s\sProprietary\sInternal\sUse\sOnly\s+\-\s+All\sRights\sReserved

[testenv]
description =
    For TUBS3, this is the base env that all other envs inherit.  It generally does not execute any specific
    commands.
basepython = python3.10
skipsdist = true
skip_install = true
passenv =
    BASHSOURCE
    CI
    cic_repository
    CI_COMMIT_BRANCH
    CI_COMMIT_REF_NAME
    CI_COMMIT_TAG
    CI_PIPELINE_SOURCE
    CI_PIPELINE_ID
    CI_PROJECT_ID
    COVER_FAIL_LESS_THAN
    ftp_proxy
    FTP_PROXY
    GIT_BRANCH
    HOME
    http_proxy
    HTTP_PROXY
    https_proxy
    HTTPS_PROXY
    LIBRARY_PATH
    no_proxy
    NO_PROXY
    PATH
    PORT
    PROJECT_PATH
    PWD
    sub_version
setenv =
    CIC_REGISTRY=registry.atds.int.net.nokia.com:5000
    LANG=en_US.UTF-8
    PROJECT_PATH={toxinidir}
    # The ignore in the following is a hack to get rid of noise introduced by a setuptools bug
    PYTHONWARNINGS=default::DeprecationWarning,ignore::DeprecationWarning:pip._vendor.packaging.version:
    TUBS_PROJECT_CONFIG_SCHEMA={envsitepackagesdir}/tubs/data/schema/project-config.yml
    # These are replicated from the commands_pre section since deps will run pip install before commands_pre is
    # invoked.  The pip config lines in commands_pre will ensure that these values are used whenever the virtual env
    # is active.
    PIP_DISABLE_PIP_VERSION_CHECK=true
    PIP_TRUSTED_HOST=artifactory-fpark1.int.net.nokia.com
    PYPI_LOCAL=https://artifactory-fpark1.int.net.nokia.com/artifactory/api/pypi/NFVFP-pypi-local/simple
    NAC_LOCAL=https://pypi.dynamic.nsn-net.net/nac/nacpy/simple
    PIP_EXTRA_INDEX_URL={env:PYPI_LOCAL} {env:NAC_LOCAL}
    PIP_INDEX_URL=https://artifactory-fpark1.int.net.nokia.com/artifactory/api/pypi/NFVFP-pypi-virtual/simple
deps =
    PyYAML
allowlist_externals =
    bash
    cp
    curl
    docker
    echo
    git
    helm
    mv
    rm
    touch
    unzip
    yq
commands_pre =
    touch {envdir}/pip.conf
    pip config set global.trusted-host {env:PIP_TRUSTED_HOST}
    pip config set global.disable-pip-version-check {env:PIP_DISABLE_PIP_VERSION_CHECK}
    pip config set global.index-url {env:PIP_INDEX_URL}
    pip config set global.extra-index-url {env:PYPI_LOCAL}
    pip config set global.extra-index-url {env:NAC_LOCAL}
commands =
    python --version

[testenv:tubs]
description =
    Used by TUBS when a generic TUBS environment is required (e.g. for setting env vars).  For the tubs project
    itself, this will generally look the same as the dev environment.  Other projects will have tubs as the only dep.
deps =
    tubs
commands = echo "TUBS environment created"

[testenv:prepare]
deps =
commands =
    echo "Nothing to prepare - skipping"

[testenv:pre_build]
deps =
commands =
    echo "Nothing to pre-build - skipping"

[testenv:{lint,flake8,isort,validate-schema,helm_lint,auto_sort}]
description =
    Used by TUBS pipelines to run lint-ish things on software
deps =
    tubs
    {lint,flake8}: flake8
    {lint,flake8}: flake8-copyright>=0.2.3
    {lint,flake8}: flake8-docstrings
    {lint,flake8}: pydocstyle
    {lint,isort}: isort[pyproject]
    {lint,validate-schema,test}: ruamel.yaml
    {lint,validate-schema,test}: yamale
commands =
    {lint,flake8}: flake8 .
    {lint,isort}: isort --check-only --diff .
    {lint,validate-schema}: verify_project_config
    {lint,helm_lint}: bash -c "source tubs_funcs.sh ; process_chart() \{ lint_chart $\{1\} ; \} ; \
    {lint,helm_lint}:          source set_base_env && walk_charts"

[testenv:{build_package,cleanup_package}]
description =
    Build the code.  Individual envs run by build are (in order) cleanup, build_package, and build_container.  NOTE:
    build_container requires that the output of build_package exist in the local tree structure (specifically the
    wheel).
deps =
    build_package: build
    build_package: tubs
commands =
    #-git fetch origin main:refs/remotes/origin/main
    rm -fr dist
    rm -fr build/lib
    rm -fr build/scripts-3.6
    bash -c "rm -fr bdist.*"
    build_package: bash -c "source set_base_env && python -m build --wheel --outdir dist"

[testenv:build_container]
description =
    Used by TUBS pipelines to build containers
deps =
    tubs
commands =
    docker version  # make sure docker is present and running
    -rm docker/*.whl
    bash -c "cp dist/*.whl docker"
    -rm docker/requirements.txt
    cp requirements.txt docker
    -rm docker/starship.yaml
    cp starship.yaml docker
    bash -c "source set_base_env && build_containers --publish"

[testenv:build_helm]
description =
    Used by TUBS pipelines to build helm charts
deps =
    tubs
commands =
    # helm version  # make sure helm is present working
    bash -c "source set_base_env && build_charts"

[testenv:build_docs]
description =
    Used by TUBS pipelines to build documentation
deps =
commands =
    echo "no docs to build"

[testenv:{test_package,report,diffcover}]
description =
    Used by the TUBS pipelines to test any packages.
deps =
    coverage[toml]
    {test_package,report}: pytest-cov
    test_package: tubs
    test_package: pyfakefs
    test_package: pytest
    test_package: pytest-asyncio
    test_package: pytest-httpx
    test_package: pytest-mock
    test_package: pytest-timeout
    test_package: python-ilorest-library
    test_package: -e .
    test_package: -r requirements.txt
    {test_package,diffcover}: diff-cover
commands =
    coverage erase
    rm -f ./junit-report.xml
    rm -f ./.coverage.xml
    bash -c "rm -f ./.coverage.*"
    coverage run --parallel-mode -m pytest --junitxml=./junit-report.xml --timeout=90 tests/unit
    {test_package,report}: coverage combine
    {test_package,report}: coverage report
    {test_package,report}: coverage xml
    #{test_package,diffcover}: -git fetch origin main:main
    #{test_package,diffcover}: diff-cover --compare main --fail-under 0 coverage.xml

[testenv:test_helm]
description =
    Used by TUBS pipelines to test helm charts
deps =
commands =
    echo "No helm charts to test"

[testenv:test_container]
description =
    Used by TUBS pipelines to test any built containers
deps =
    tubs
commands =
    docker version  # make sure docker is available and running
    bash -c "source set_base_env && source tubs_funcs.sh && \
             source ./build/scripts/test_container.sh && \
             walk_containers"

[testenv:test_docs]
description =
    Used by TUBS pipelines to test docs
deps =
commands =
    echo "no docs to test"

[testenv:bundle]
description =
    Used by the TUBS pipelines to set up the environment to be used when packaging artifacts into deployable things
deps =
    build
    # tubs
commands =
    python -m build --sdist --outdir dist
    #bash -c "source ./scripts/set_base_env && gtar cjvf $\{docs_filename\} \
    #         --xform='s,docs/\(.*\)-guide/build/latex/,docs/\1/,' \
    #         --xform='s,docs/\(.*\)-guide/build/html,docs/\1,' \
    #         docs/*-guide/build/latex/*.pdf docs/*-guide/build/html"

[testenv:release]
description =
    Used by TUBS pipelines to release built artifacts
passenv =
    {[testenv]passenv}
    artifactory_apikey
    ibuild_password
    ibuild_token
    CI_BUILD_REF_NAME
deps =
    tubs
commands =
    # bash -c "source set_base_env && release_container"
    # bash -c "source set_base_env && \
    #         curl -H \"X-JFrog-Art-Api: $\{artifactory_apikey}\" \
    #              -T $\{helm_dest}/nwdaf_af-$\{sem_ver_sub_version}.tgz \
    #              $\{artifactory_base_path}/$\{helm_repo}/nwdaf_af-$\{sem_ver_sub_version}.tgz"
    bash -c "source set_base_env && release"
    #bash -c "source set_base_env && \
    #         docker image pull  registry.atds.int.net.nokia.com:5000/atds/nwdaf-af:$\{sub_version} && \
    #         docker tag registry.atds.int.net.nokia.com:5000/atds/nwdaf-af:$\{sub_version} harbc.atsg0-wqm6b-8xc6z.876658415114.aws.nokia-solution.com/nwdaf-poc/nwdaf-af:$\{sub_version} && \
    #         docker push harbc.atsg0-wqm6b-8xc6z.876658415114.aws.nokia-solution.com/nwdaf-poc/nwdaf-af:$\{sub_version}"

[testenv:deploy]
description =
   Used by TUBS pipelines to deploy something
deps =
commands =
    echo "not yet implemented"

[testenv:verify]
description =
    Used by TUBS pipelines to verify that a deployed something works
deps =
    tubs
commands =
    validate

[testenv:promote]
deps =
    tubs
commands =
    promote

[testenv:dev]
description =
    Create a development env
deps =
    -e .
    -c requirements.txt
    tubs
commands = 
    echo "Dev environment created"

